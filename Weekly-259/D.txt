#pragma GCC optimize("O2")
#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for(int i = 0; i < (n); ++i)
#define rrep(i,n) for(int i = (n)-1; i >= 0; --i)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
template<class T> void chmax(T& a, const T& b) {a = max(a, b);}
template<class T> void chmin(T& a, const T& b) {a = min(a, b);}
using ll = long long;
using P = pair<int,int>;
using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;

static const auto my_init = []{
    ios::sync_with_stdio(false);
    cin.tie(0);
    return false;
}();


class Solution {
public:
    string longestSubsequenceRepeatedK(string s, int k) {
        string ans;
        auto check = [&](const string& t) {
            int cnt = 0;
            int p = 0;
            const int tsz = t.size();
            for(char c: s) {
                if (c == t[p]) {
                    p++;
                    if (p == tsz) {
                        cnt++;
                        p = 0;
                    }
                }
            }
            return cnt >= k;
        };
        VI cnts(26);
        for(char c: s) cnts[c - 'a']++;
        string cands;
        rep(i, 26) {
            rep(_, cnts[i] / k) cands += 'a' + i;
        }
        int sz = cands.size();
        rep(b, 1 << sz) if (b) {
            string t;
            rep(i, sz) if (b >> i & 1) t += cands[i];
            sort(all(t));
            do {
                if (t.size() >= ans.size() && check(t)) {
                    ans = t;
                }
            } while(next_permutation(all(t)));
        }
        return ans;
    }
};